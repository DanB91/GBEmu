Bugs/Optimization:
    - add icon
    
    - check for duplicate configs
    
    - Resizable window
    
    - tie .gb and .gbc files to app
    
    - Fix bugs for gameboy demo
    
    - Look into how games use the RTC other than Pokemon
    
    - Optimize sound
    
    - Test on international keyboards
    
    - Optimize drawScanLine
        
    - Sound
        - Implement rest of  register reading
        - Implement power side effects 
        - Move frame generation to platform layer
        
    - Fix timings so that LCD lock outs work
    
    - Fix recordDebugState slowness
    
    - Is the following logic correct?
        if (lcd->isEnabled) {
            lcd->lcdc |= (u8)lcd->mode;
        }
        else {
           lcd->lcdc &= 0xF8; //clear status bits if disabled.
        }

Testing:
    - Check behavior if disk runs out of space.

Code Style:
    - Nail down a consistancy of integer types
    

Features:
    -Config file (support config file via command line as well).
        - Key and controller mappings
        - Color schemes
        
    - On screen notifications
    
    - Implement "temp" mode where GBEmu doesn't write any files and thus doesn't need a gbemu_home.
     
    - Game Boy Color
    
    - Custom interface
    
    - Online Play


------------------------------------------------------------------------------------------------------------------------------------------------------------
Bug Notes:

-Debug pocket.gb demo
    - Gray screen after eye demo
    - Looks like address 0x27BF we are checking ly is never 144 as expected. It is 145, 147 or 149.  looks like the VBlank handler takes a variable number of scanlines
        to complete.  
    - This implies timings might be incorrect with lcd

- Debug 2048
    - Caused when uncommenting the ScanVRAMAndOAM lockout code.
    - Its tryring to write a value at 9A08 but the LCD is in ScanVRAMAndOAM mode. LCD timings might be off
    - Its 12 cycles into mode ScanVRAMAndOAM (mode 3).
    - Drawing the tile at 9A08 seems to be 12 cycles before the cut off.  Sticking in 5 NOPs will cause the same issue in BGB
    - Its supposed to be mode ScanOAM (mode 2).
    - Sticking in a NOP before waithblank fixes the problem. This implies something is taking 4 cycles less time than it should before hblank
    
- Debug Pokemon Pinball
    In FieldVerticalTransition: ; 0x6674:
           call ToggleAudioEngineUpdateMethod
           call DisableLCD  <---- This never returns.  Figure out why. 
           call ClearOAMBuffer
           call Func_1129
           
    DisableLCD waits until the LCD is disabled.  The actual disabling of the LCD is only done in the VBlank interrupt handler, but that handler never does a RETI
    It seems when DisableLCD returns properly, the Timer and LCD interrupt flags are cleared, with VBlank set.  But in this case, all 3 are set.
    
In VBlank:
.asm_3b7
    ld a, [wDrawBottomMessageBox]
    and a
    call nz, DrawBottomMessageBox
    ...
    reti
We need to get to reti.  DrawBottomMessage box is called

DrawBottomMessageBox: ; 0xe69
; Draws the current scrolling bottom message box to VRAM during V-Blank.
; Note, this only applies to the 1-tile high message bar. When it displays, things like Ball Bonus summary, and
; the Save/Cancel menu, this is not used to draw the message buffer.
        ld a, [rLY]
        cp $90
        jr nc, DrawBottomMessageBox ; ensure we're in V-Blank
        

The thing is, we are in VBlank!!  

THe solution:

    Compared it to BGB: rLY (FF44) is supposed to be 0 when lcd is disabled.  Once I put the fix in, it started working!
    
